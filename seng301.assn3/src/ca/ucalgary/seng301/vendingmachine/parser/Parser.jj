options{  BUILD_TOKEN_MANAGER = true;  JAVA_UNICODE_ESCAPE = false;  UNICODE_INPUT = true;  ERROR_REPORTING = false;  COMMON_TOKEN_ACTION = false;  STATIC = false;  DEBUG_TOKEN_MANAGER = false;  DEBUG_PARSER = false;}PARSER_BEGIN(Parser)package ca.ucalgary.seng301.vendingmachine.parser;import java.util.*;import ca.ucalgary.seng301.vendingmachine.*;import ca.ucalgary.seng301.vendingmachine.hardware.*;@SuppressWarnings("all")public class Parser {  private boolean debug = false;    public void setDebug(boolean flag) {    debug = flag;  }  public Parser(String s) {    this(new java.io.StringReader(s));  }  public boolean inputIsConsumed()  {    try    {      Token t = token_source.getNextToken();      if (t.kind != ParserConstants.EOF || t.specialToken != null) return false;    }    catch (TokenMgrError e)    {      return false;    }    return true;  }  private IVendingMachineFactory vm = null;  private ArrayList<Object> extraction = new ArrayList<Object>();  private VendingMachineStoredContents teardown = null;    public void register(IVendingMachineFactory vm) {    this.vm = vm;  }  private boolean checkDelivery(int change, List<String> pops)  {    boolean result = true;    if(extraction == null)      return false;      	for(Object o: extraction)	{	  if(o instanceof Coin)	    change -= ((Coin)o).getValue();   	  else	  {	    String name = ((PopCan)o).getName();	    if(!(pops.contains(name))) {	        result = false;	    	if(debug)	    	  System.err.println("Failure: " + name + " has been returned where it should not have been");        }        else          pops.remove(name);	  }	}	if(change != 0) {	  result = false;	  if(debug)   	    System.err.println("Failure: " + change + " != 0");    }    	if(!pops.isEmpty())		for(String s : pops) {		  result = false;		  if(debug)		    System.err.println("Failure: expected to find " + s);		}	return result;  }  private boolean checkTeardown(int change, int payments, List<String> pops) {    boolean result = true;	if(teardown == null) {	  if(debug)	    System.err.println("Failure: teardown is null");	  return false;	}    int totalCoins = 0;    for(List<Coin> coins : teardown.unusedCoinsForChange) {          for(Coin coin : coins) {            totalCoins += coin.getValue();        }    }              if(totalCoins != change) {	    result = false;		if(debug)		  System.err.println("Failure: change expected is " + change + " but was " + totalCoins);    }    	totalCoins = 0;	for(Coin coin : teardown.paymentCoinsInStorageBin)	    totalCoins += coin.getValue();    if(totalCoins != payments) {	    result = false;		if(debug)		  System.err.println("Failure: payments expected is " + payments + " but was " + totalCoins);    }    for(List<PopCan> popCans : teardown.unsoldPopCans)    {              for(PopCan popCan : popCans) {            String name = popCan.getName();            if(!(pops.contains(name))) {	            result = false;	            if(debug)	                System.err.println("Failure: " + name + " has been returned where it should not have been");            }            else                pops.remove(name);      }    }          	if(!pops.isEmpty())	{	  		for(String s : pops) {		  result = false;		  if(debug)		    System.err.println("Failure: expected to find " + s);		}}	return result;  }  private void announceConstruct(ArrayList<Integer> coinKinds, int selectionButtonCount, int coinRackCapacity, int popCanRackCapacity, int receptacleCapacity) {    vm.construct(coinKinds, selectionButtonCount, coinRackCapacity, popCanRackCapacity, receptacleCapacity);  }	      private void announceConfigure(ArrayList<String> popNames, ArrayList<Integer> popCosts) {    vm.configure(popNames, popCosts);  }  private void announceLoad(ArrayList<Integer> coinCounts, ArrayList<Integer> popCounts) {    vm.load(coinCounts, popCounts);  }  private void announceUnload() {    teardown = null;    teardown = vm.unload();  }  private void announceExtract() {    extraction.clear();    extraction.addAll(vm.extract());  }  private void announcePress(int value) {    vm.press(value);  }  private void announceInsert(int value) throws DisabledException {    vm.insert(value);  }}PARSER_END(Parser)SKIP :{  " "| "\t"| "\n"| "\r"| "\f"}/* COMMENTS */MORE :{  < "/**" ~[ "/" ] > { input_stream.backup(1); } : FORMAL_COMMENT| "/*": MULTI_LINE_COMMENT}SKIP :{  < SINGLE_LINE_COMMENT: "//"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? >}< MULTI_LINE_COMMENT, FORMAL_COMMENT >SKIP :{  "*/": DEFAULT}< FORMAL_COMMENT, MULTI_LINE_COMMENT >MORE :{  < ~[ ] >}TOKEN :{  < CONSTRUCT : "construct" >| < CONFIGURE : "configure" >| < EXTRACT : "extract" >| < PRESS : "press" >| < INSERT : "insert" >| < LOAD : "load" >| < UNLOAD : "unload" >| < CHECK_DELIVERY : "CHECK_DELIVERY" >| < CHECK_TEARDOWN : "CHECK_TEARDOWN" >}TOKEN :{  < INTEGER_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* | "0" >|  < STRING_LITERAL:      "\""      (   (~["\"","\\","\n","\r"])        | ("\\"            ( ["n","t","b","r","f","\\","'","\""]            | ["0"-"7"] ( ["0"-"7"] )?            | ["0"-"3"] ["0"-"7"] ["0"-"7"]            )          )      )*      "\""  >}TOKEN :{  < LPAREN : "(" >| < RPAREN : ")" >| < COMMA : "," >| < SEMICOLON : ";" >}void process(String path) throws DisabledException :{  boolean res;  int i = 0;}{  {	System.err.println("Script: " + path);  }  ( res = Command()  {    System.err.print("Command #" + i++ + ": ");    if(res)	    System.err.println("PASS");	else	    System.err.println("FAIL");  }  )*  {    System.err.println();  }  < EOF >}boolean Command() throws DisabledException :{  boolean res = true;}{(  Construct()| Configure()| Extract()| Press()| Insert()| Load()| Unload()| res = CHECK_DELIVERY()| res = CHECK_TEARDOWN()){  return res;}}void Construct() :{  Token ch;  int selectionButtonCount, coinRackCapacity, popCanRackCapacity, receptacleCapacity;  ArrayList<Integer> coinKinds = new ArrayList<Integer>();}{  < CONSTRUCT > "(" ch = < INTEGER_LITERAL >  {    coinKinds.add(Integer.parseInt(ch.image));  }  (    "," ch = < INTEGER_LITERAL >    {      coinKinds.add(Integer.parseInt(ch.image));    }  )*  ";"  ch = < INTEGER_LITERAL >  {    selectionButtonCount = Integer.parseInt(ch.image);  }  ";"  ch = < INTEGER_LITERAL >  {    coinRackCapacity = Integer.parseInt(ch.image);  }  ";"  ch = < INTEGER_LITERAL >  {    popCanRackCapacity = Integer.parseInt(ch.image);  }  ";"  ch = < INTEGER_LITERAL >  {    receptacleCapacity = Integer.parseInt(ch.image);  }  ")"  {    announceConstruct(coinKinds, selectionButtonCount, coinRackCapacity, popCanRackCapacity, receptacleCapacity);  }}void Configure() :{  String name;  Token cost;  ArrayList<String> names = new ArrayList<String>();  ArrayList<Integer> costs = new ArrayList<Integer>();}{  < CONFIGURE > "("  name = String()  {    names.add(name);  }  (    "," name = String()    {      names.add(name);    }  )*  ";" cost = < INTEGER_LITERAL >  {    costs.add(Integer.parseInt(cost.image));  }  (    "," cost = < INTEGER_LITERAL >    {      costs.add(Integer.parseInt(cost.image));    }  )*  ")"  {    announceConfigure(names, costs);  }}void Load() :{  Token coinCount, popCount;  ArrayList<Integer> coinCounts = new ArrayList<Integer>(), popCounts = new ArrayList<Integer>();}{  < LOAD > "(" coinCount = < INTEGER_LITERAL >  {    coinCounts.add(Integer.parseInt(coinCount.image));  }  (    "," coinCount = < INTEGER_LITERAL >    {      coinCounts.add(Integer.parseInt(coinCount.image));    }  )*  ";" popCount = < INTEGER_LITERAL >  {    popCounts.add(Integer.parseInt(popCount.image));  }    (    "," popCount = < INTEGER_LITERAL >    {      popCounts.add(Integer.parseInt(popCount.image));    }  )*  ")"  {    announceLoad(coinCounts, popCounts);  }}boolean CHECK_DELIVERY() :{  Token ch;  String pop;  int change;  ArrayList<String> pops = new ArrayList<String>();}{  < CHECK_DELIVERY > "(" ch = < INTEGER_LITERAL >  {    change = Integer.parseInt(ch.image);  }  ("," pop = String()  {  	  pops.add(pop);  } )*  ")"  {    return checkDelivery(change, pops);  }}boolean CHECK_TEARDOWN() :{  Token ch;  String pop;  int change, payments;  ArrayList<String> pops = new ArrayList<String>();}{  < CHECK_TEARDOWN > "(" ch = < INTEGER_LITERAL >  {    change = Integer.parseInt(ch.image);  }  ";"   ch = < INTEGER_LITERAL >  {    payments = Integer.parseInt(ch.image);  }    [";" [pop = String()  {  	  pops.add(pop);  }    ("," pop = String()  {  	  pops.add(pop);  } )*  ]]  ")"  {    return checkTeardown(change, payments, pops);  }}void Extract() :{}{  < EXTRACT > "(" ")"  {    announceExtract();  }}void Press() :{  Token t;}{  < PRESS > "(" t = < INTEGER_LITERAL >")"  {    announcePress(Integer.parseInt(t.image));  }}void Insert() throws DisabledException :{  Token t;}{  < INSERT > "(" t = < INTEGER_LITERAL >")"  {    announceInsert(Integer.parseInt(t.image));  }}void Unload() :{}{  < UNLOAD > "(" ")"  {    announceUnload();  }}String String() :{  Token t;}{  t = < STRING_LITERAL >  {    String s = t.image;    return s.substring(1, s.length() - 1);  }}